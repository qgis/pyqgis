# -*- coding: utf-8 -*-
#
# QGIS Website documentation build configuration file, created by
# sphinx-quickstart on Fri Aug 23 10:59:00 2013.
#
# This file is execfile() with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os
import yaml


# append custom sphinx_rtd_theme to handle versioning
sphinx_rtd_egg_path = '__SPHINX_RTD_EGG_PATH__'
if sphinx_rtd_egg_path != "":
    sys.path.append(sphinx_rtd_egg_path)
import sphinx_rtd_theme


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../'))


with open('../../pyqgis_conf.yml', 'r') as f:
    cfg = yaml.load(f)


# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx_autodoc_typehints'
]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['../templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'QGIS Python API'
copyright = u'2018, QGIS project'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '__QGISVERSION__'
# The full version, including alpha/beta/rc tags.
release = '__QGISVERSION__'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['output', "i18n", "resources", "scripts"]
# for faster builds, you can exclude certain parts from the build

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]  # use with module import

# html_theme_path = ['.']  # use with git submodule

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
  'collapse_navigation': False,
  'sticky_navigation': False,
  'display_version': True,
  'prev_next_buttons_location': None,
  'titles_only': True,
  'versioning': True
}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = ""

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '../../resources/en/common/logo.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '../../resources/en/common/qgis.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['themes/qgis-theme/static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%H:%M %b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

version_list = cfg['version_list'].replace(' ','').split(',')
url = cfg['pyqgis_url']
if not url.endswith('/'):
  url += '/'

if version not in version_list:
  raise ValueError('QGIS version is not in version list', version, version_list)

context = {
    #'READTHEDOCS': True,
    'version_downloads': False,
	  'current_version': version,
    'versions': [ [v, url+v] for v in version_list],
	#'downloads': [ ['PDF', '/builders.pdf'], ['HTML', '/builders.tgz'] ],
}

if 'html_context' in globals():
    html_context.update(context)
else:
    html_context = context


# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = False

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'QGISAPIDOC'

rst_prolog = """
.. role:: disclaimer
.. |updatedisclaimer| replace:: :disclaimer:`Docs for 'QGIS __QGISVERSION__'`
"""

# Substitutions icons below are sorted
# NOTE that for inline images (like button and menu icons inline in text) you HAVE TO make a substitution
# so ONLY use common for this kind of images
rst_epilog = """
.. |localCRS| replace:: :kbd:`WGS 84 / UTM 34S`
"""


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'qgiswebsite', u'QGIS Website Documentation',
     [u'QGIS Contributors'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


locale_dirs = ['../i18n/']
gettext_compact = False


def setup(app):
    try:
        from autoautosummary import AutoAutoSummary
        app.add_directive('autoautosummary', AutoAutoSummary)
    except BaseException as e:
        raise e

# adding this because in pycookbook a lot of text is referencing classes, which cannot be found by sphinx
# eg: Map canvas is implemented as :class:`QgsMapCanvas` ...
# I hope somebody will create the real references for these so they can be removed here...
nitpick_ignore = [('py:class', 'QAction'),
                  ('py:class', 'QDomElement'),
                  ('py:class', 'QFileInfo'),
                  ('py:class', 'QGraphicsScene'),
                  ('py:class', 'QgsAccessControlFilter'),
                  ('py:class', 'QgsCategorizedSymbolRendererV2'),
                  ('py:class', 'QgsComposerItem'),
                  ('py:class', 'QgsComposition'),
                  ('py:class', 'QgsCoordinateReferenceSystem'),
                  ('py:class', 'QgsCoordinateTransform'),
                  ('py:class', 'QgsDataSourceURI'),
                  ('py:class', 'QgsDistanceArea'),
                  ('py:class', 'QgsEditError'),
                  ('py:class', 'QgsExpression'),
                  ('py:class', 'QgsFeature'),
                  ('py:class', 'QgsFeatureRendererV2'),
                  ('py:class', 'QgsFiels'),
                  ('py:class', 'QgsFillSymbolV2'),
                  ('py:class', 'QgsGeometry'),
                  ('py:class', 'QgsGraduatedSymbolRendererV2'),
                  ('py:class', 'QgsGraphAnalyzer'),
                  ('py:class', 'QgsInterface'),
                  ('py:class', 'QgisInterface'),
                  ('py:class', 'QgsLayerTreeMapCanvasBridge'),
                  ('py:class', 'QgsLineSymbolV2'),
                  ('py:class', 'QgsMapCanvas'),
                  ('py:class', 'QgsMapCanvasItem'),
                  ('py:class', 'QgsMapCanvasItem'),
                  ('py:class', 'QgsMapCanvasMap'),
                  ('py:class', 'QgsMapRenderer'),
                  ('py:class', 'QgsMapServiceException'),
                  ('py:class', 'QgsMapTool'),
                  ('py:class', 'QgsMapToolPan'),
                  ('py:class', 'QgsMapToolZoom'),
                  ('py:class', 'QgsMarkerSymbolV2'),
                  ('py:class', 'QgsMessageBar'),
                  ('py:class', 'QgsPoint'),
                  ('py:class', 'QgsProject'),
                  ('py:class', 'QgsRasterLayer'),
                  ('py:class', 'QgsRasterRenderer'),
                  ('py:class', 'QgsRendererV2AbstractMetadata'),
                  ('py:class', 'QgsRendererV2Registry'),
                  ('py:class', 'QgsRendererV2Widget'),
                  ('py:class', 'QgsRequestHandler'),
                  ('py:class', 'QgsRubberBand'),
                  ('py:class', 'QgsServerFilter'),
                  ('py:class', 'QgsServerInterface'),
                  ('py:class', 'QgsSingleSymbolRendererV2'),
                  ('py:class', 'QgsStyleV2'),
                  ('py:class', 'QgsSymbolLayerV2'),
                  ('py:class', 'QgsSymbolLayerV2Registry'),
                  ('py:class', 'QgsSymbolV2'),
                  ('py:class', 'QgsVectorColorRampV2'),
                  ('py:class', 'QgsVectorFileWriter'),
                  ('py:class', 'QgsVectorLayer'),
                  ('py:class', 'QgsVectorLayerEditUtils'),
                  ('py:class', 'QgsVertexMarker'),
                  ('py:class', 'QMenu'),
                  ('py:class', 'QSettings'),

                  ('py:data', 'iface'),
                  ('py:data', 'qgis.utils.iface'),

                  ('py:func', 'addFeatures'),
                  ('py:func', 'addPluginToDatabaseMenu'),
                  ('py:func', 'addPluginToMenu'),
                  ('py:func', 'addPluginToRasterMenu'),
                  ('py:func', 'addPluginToVectorMenu'),
                  ('py:func', 'addPluginToWebMenu'),
                  ('py:func', 'angle'),
                  ('py:func', 'asMultiPoint'),
                  ('py:func', 'asMultiPolygon'),
                  ('py:func', 'asMultiPolyline'),
                  ('py:func', 'beginEditCommand'),
                  ('py:func', 'capabilities'),
                  ('py:func', 'capabilitiesString'),
                  ('py:func', 'changed'),
                  ('py:func', 'classAttribute'),
                  ('py:func', 'classFactory'),
                  ('py:func', 'clone'),
                  ('py:func', 'color'),
                  ('py:func', 'commitChanges'),
                  ('py:func', 'contains'),
                  ('py:func', 'create*'),
                  ('py:func', 'createRenderer'),
                  ('py:func', 'createRendererWidget'),
                  ('py:func', 'createSimple'),
                  ('py:func', 'createSpatialIndex'),
                  ('py:func', 'createSymbolLayer'),
                  ('py:func', 'createSymbolLayerWidget'),
                  ('py:func', 'destroyEditCommand'),
                  ('py:func', 'difference'),
                  ('py:func', 'dijkstra'),
                  ('py:func', 'dump'),
                  ('py:func', 'endEditCommand'),
                  ('py:func', 'executeRequest'),
                  ('py:func', 'exitQgis'),
                  ('py:func', 'features'),
                  ('py:func', 'fields'),
                  ('py:func', 'getFeatures'),
                  ('py:func', 'hide'),
                  ('py:func', '__init__'),
                  ('py:func', 'initAttributes'),
                  ('py:func', 'initGui'),
                  ('py:func', 'initGui()'),
                  ('py:func', 'initQgis'),
                  ('py:func', 'instance'),
                  ('py:func', 'intersects'),
                  ('py:func', 'isEditable'),
                  ('py:func', 'isMultipart'),
                  ('py:func', 'isValid'),
                  ('py:func', 'label'),
                  ('py:func', 'layerType'),
                  ('py:func', 'mode'),
                  ('py:func', 'nextFeature'),
                  ('py:func', 'pendingFields'),
                  ('py:func', 'properties'),
                  ('py:func', 'QgsApplication.setPrefixPath'),
                  ('py:func', 'QgsCoordinateReferenceSystem.createFromString'),
                  ('py:func', 'QgsExpression.prepare'),
                  ('py:func', 'read()'),
                  ('py:func', 'read'),
                  ('py:func', 'registerFilter'),
                  ('py:func', 'renderer'),
                  ('py:func', 'renderPoint'),
                  ('py:func', 'renderPolygon'),
                  ('py:func', 'renderPolyline'),
                  ('py:func', 'requestReady'),
                  ('py:func', 'requestReady()'),
                  ('py:func', 'responseComplete'),
                  ('py:func', 'rollBack'),
                  ('py:func', 'selectedFeatures'),
                  ('py:func', 'sendResponse'),
                  ('py:func', 'sendResponse()'),
                  ('py:func', 'serverClassFactory'),
                  ('py:func', 'setClassAttribute'),
                  ('py:func', 'setColor'),
                  ('py:func', 'setDataSource'),
                  ('py:func', 'setIcon'),
                  ('py:func', 'setMapTool'),
                  ('py:func', 'setRenderer'),
                  ('py:func', 'setSelectedFeatures'),
                  ('py:func', 'setSelectionColor'),
                  ('py:func', 'setSymbol'),
                  ('py:func', 'setSymbolLayer'),
                  ('py:func', 'shortestTree'),
                  ('py:func', 'show'),
                  ('py:func', 'size'),
                  ('py:func', 'showPluginHelp'),
                  ('py:func', 'sourceColorRamp'),
                  ('py:func', 'sourceSymbol'),
                  ('py:func', 'startEditing'),
                  ('py:func', 'startRender'),
                  ('py:func', 'stopRender'),
                  ('py:func', 'symbol'),
                  ('py:func', 'symbolForFeature'),
                  ('py:func', 'symbolLayer'),
                  ('py:func', 'transform'),
                  ('py:func', 'type'),
                  ('py:func', 'union'),
                  ('py:func', 'unload'),
                  ('py:func', 'unload()'),
                  ('py:func', 'usedAttributes'),
                  ('py:func', 'value'),
                  ('py:func', 'value()'),
                  ('py:func', 'width'),
                  ('py:func', 'wkbType'),
                  ('py:func', 'write'),
                  ('py:func', 'writeEntry'),
                  ('py:func', 'x'),
                  ('py:func', 'y'),

                  ('py:obj', 'QgsFeatureRequest'),
                  ('py:obj', 'QgsExpression'),

                  ('py:const', 'EpsgCrsId'),
                  ('py:const', 'InternalCrsId'),
                  ('py:const', 'PostgisCrsId'),
                  ('py:const', 'True'),

                  ('py:mod', 'qgis.core'),
                  ('py:mod', 'qgis.gui'),
                  ('py:mod', 'qgis.utils'),
                  ]
